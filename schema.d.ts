/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/sizes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Список размеров
         * @description Возвращает все размеры одежды
         */
        get: operations["ef3321182c65ddf3641d24b887a9bba2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/colors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Список цветов
         * @description Возвращает все цвета одежды
         */
        get: operations["e4b6e58898f6112dd45542f681e45dac"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Регистрация пользователя */
        post: operations["d764dd091cc4494ae0baf360b03319f3"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/sendPhone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Первый экран входа, отправка смс кода */
        post: operations["5163747d162ddfa7ce92bf33811c998e"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/checkCode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Проверка смс кода */
        post: operations["715451e030d64688fd5ab7c760063d85"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Обновление access токена по refresh токену */
        post: operations["b2eae7a8032954d25b46c7ec6f489c68"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Список товаров с пагинацией и фильтрами
         * @description Возвращает список товаров с поддержкой фильтров по размеру, цвету и цене, а также информацией о пагинации
         */
        get: operations["1bfaa78d1c2c3848ab8165c5dadcad3e"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Профиль пользователя
         * @description Возвращает данные профиля
         */
        get: operations["a89d41894c20f774de86b3c94ba2fd77"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    ef3321182c65ddf3641d24b887a9bba2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Успешный ответ */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example success */
                        status?: string;
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example M */
                            name?: string;
                        }[];
                    };
                };
            };
        };
    };
    e4b6e58898f6112dd45542f681e45dac: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Успешный ответ */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example success */
                        status?: string;
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example Красный */
                            name?: string;
                            /** @example #FF0000 */
                            hex?: string;
                        }[];
                    };
                };
            };
        };
    };
    d764dd091cc4494ae0baf360b03319f3: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example Иван */
                    first_name: string;
                    /** @example Иванов */
                    last_name: string;
                    /** @example ivan@example.com */
                    email: string;
                };
            };
        };
        responses: {
            /** @description Пользователь зарегистрирован */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ошибка валидации */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "5163747d162ddfa7ce92bf33811c998e": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example +79991234567 */
                    phone?: string;
                };
            };
        };
        responses: {
            /** @description Код отправлен */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ошибка валидации */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "715451e030d64688fd5ab7c760063d85": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example +79991234567 */
                    phone?: string;
                    /** @example 111111 */
                    code?: string;
                };
            };
        };
        responses: {
            /** @description Код отправлен */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ошибка валидации */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    b2eae7a8032954d25b46c7ec6f489c68: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Refresh token передаётся в HttpOnly cookie */
        requestBody?: {
            content: {
                "application/json": unknown;
            };
        };
        responses: {
            /** @description Новый access токен успешно выдан */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example success */
                        message?: string;
                        /** @example eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9... */
                        access_token?: string;
                        /** @example 3600 */
                        expires_in?: number;
                    };
                };
            };
            /** @description Не удалось обновить токен (отсутствует или неверный refresh token) */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Invalid refresh token */
                        message?: string;
                    };
                };
            };
        };
    };
    "1bfaa78d1c2c3848ab8165c5dadcad3e": {
        parameters: {
            query?: {
                /** @description Фильтр по размеру (ID размера) */
                size_id?: number;
                /** @description Фильтр по цвету (ID цвета) */
                color_id?: number;
                /** @description Минимальная цена (фильтр по нижней границе) */
                price_min?: number;
                /** @description Максимальная цена (фильтр по верхней границе) */
                price_max?: number;
                /** @description Номер страницы */
                page?: number;
                /** @description Количество товаров на странице */
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Успешный ответ */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example success */
                        status?: string;
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example Стильная рубашка */
                            name?: string;
                            /** @example https://source.unsplash.com/400x400/?clothes */
                            photo?: string;
                            /** @example 2500 */
                            price?: number;
                            /** @example true */
                            is_new?: boolean;
                            /** @example 1 */
                            size_id?: number;
                            /** @example 1 */
                            color_id?: number;
                        }[];
                        meta?: {
                            /** @example 1 */
                            current_page?: number;
                            /** @example 10 */
                            last_page?: number;
                            /** @example 15 */
                            per_page?: number;
                            /** @example 150 */
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    a89d41894c20f774de86b3c94ba2fd77: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Профиль пользователя */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 1 */
                        user_id?: number;
                        /** @example Иван Иванов */
                        name?: string;
                        /** @example ivan@example.com */
                        email?: string;
                        /**
                         * Format: date-time
                         * @example 2025-08-30T12:34:56Z
                         */
                        created_at?: string;
                    };
                };
            };
            /** @description Неавторизован (нет access token или он недействителен) */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Доступ запрещён */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
